create table public."Orderitems" (
  id bigint generated by default as identity not null,
  order_id bigint null,
  ticket_id bigint null,
  quantity bigint null,
  sub_price text null,
  userid text null,
  status text null default 'confirmed'::text,
  used_premium_discount boolean null,
  constraint Orderitems_pkey primary key (id),
  constraint Orderitems_order_id_fkey foreign KEY (order_id) references orders (id),
  constraint Orderitems_ticket_id_fkey foreign KEY (ticket_id) references tickets (id),
  constraint Orderitems_userid_fkey foreign KEY (userid) references users (user_id)
) TABLESPACE pg_default;

create table public.connections (
  connection_id serial not null,
  user_id1 text null,
  user_id2 text null,
  status character varying(255) null,
  constraint connections_pkey primary key (connection_id),
  constraint connections_user_id1_fkey foreign KEY (user_id1) references users (user_id),
  constraint connections_user_id2_fkey foreign KEY (user_id2) references users (user_id),
  constraint connections_status_check check (
    (
      (status)::text = any (
        array[
          ('requested'::character varying)::text,
          ('accepted'::character varying)::text
        ]
      )
    )
  )
) TABLESPACE pg_default;

create table public.duos (
  id uuid not null default gen_random_uuid (),
  requester_id text not null,
  partner_id text not null,
  status character varying(20) not null default 'pending'::character varying,
  created_at timestamp without time zone null default now(),
  constraint duos_pkey primary key (id),
  constraint unique_duo_pair unique (requester_id, partner_id),
  constraint fk_partner foreign KEY (partner_id) references users (user_id) on delete CASCADE,
  constraint fk_requester foreign KEY (requester_id) references users (user_id) on delete CASCADE,
  constraint no_self_duo check ((requester_id <> partner_id))
) TABLESPACE pg_default;

create table public.groups (
  group_id serial not null,
  name text null,
  location text null,
  joined_members integer null,
  description text null,
  exclusive boolean null,
  profile_image text null,
  interests text[] null,
  images text[] null,
  top_events boolean null,
  group_type text null,
  category text null,
  city text null,
  startdatetime timestamp with time zone null,
  enddatetime timestamp with time zone null,
  event_status text null,
  hidden boolean null,
  iftickets boolean null,
  userid text null,
  videos text null,
  premiumtype text null,
  constraint groups_pkey primary key (group_id),
  constraint groups_userid_fkey foreign KEY (userid) references users (user_id)
) TABLESPACE pg_default;

create index IF not exists idx_groups_location on public.groups using btree (location) TABLESPACE pg_default;

create table public.orders (
  id bigint generated by default as identity not null,
  created_at timestamp with time zone not null default now(),
  user_id text null,
  total_price text null,
  status public.orderstatustype null default 'confirmed'::orderstatustype,
  paymentid text null,
  constraint orders_pkey primary key (id),
  constraint orders_user_id_fkey foreign KEY (user_id) references users (user_id)
) TABLESPACE pg_default;

create trigger order_cancellation
after
update OF status on orders for EACH row when (
  old.status = 'confirmed'::orderstatustype
  and new.status = 'cancelled'::orderstatustype
)
execute FUNCTION handle_cancellation ();

create table public.subscription (
  id uuid not null default gen_random_uuid (),
  user_id text not null,
  venue_id bigint not null,
  playing_date_and_time jsonb not null,
  type text not null,
  created_at timestamp with time zone not null default now(),
  updated_at timestamp with time zone not null default now(),
  constraint subscription_pkey primary key (id),
  constraint subscription_user_id_fkey foreign KEY (user_id) references users (user_id) on delete CASCADE,
  constraint subscription_venue_id_fkey foreign KEY (venue_id) references venues (id) on delete CASCADE
) TABLESPACE pg_default;

create table public.tags (
  id uuid not null default gen_random_uuid (),
  user_id text not null,
  ticket_id bigint not null,
  tag text not null,
  constraint tags_pkey primary key (id),
  constraint tags_ticket_id_fkey foreign KEY (ticket_id) references tickets (id) on delete CASCADE,
  constraint tags_user_id_fkey foreign KEY (user_id) references users (user_id) on delete CASCADE
) TABLESPACE pg_default;

create table public.tickets (
  id bigint generated by default as identity not null,
  created_at timestamp with time zone not null default now(),
  group_id integer null,
  type text null,
  title text null,
  description text null,
  capacity bigint null,
  startdatetime timestamp with time zone null,
  enddatetime timestamp with time zone null,
  ticketstatus text null,
  price text null,
  priceincludinggst boolean null,
  ticketpergroup text null,
  sku text null,
  bookedtickets bigint null default '0'::bigint,
  location text null,
  wooid bigint null,
  venueid bigint null,
  images text[] null,
  constraint tickets_pkey primary key (id),
  constraint tickets_group_id_fkey foreign KEY (group_id) references groups (group_id),
  constraint tickets_venueid_fkey foreign KEY (venueid) references venues (id)
) TABLESPACE pg_default;

create table public.users (
  age text null,
  images text[] null,
  location text null,
  faith text null,
  drink text null,
  smoke text null,
  college character varying(255) null,
  work character varying(255) null,
  interests text[] null,
  zodiac character varying(255) null,
  political_leaning character varying(255) null,
  hometown character varying(255) null,
  mother_tongue text[] null,
  recommended_users text[] null,
  last_updated timestamp without time zone null,
  liked_users text[] null,
  first_name character varying(255) null,
  email character varying(255) null,
  birthday date null,
  gender text null,
  looking_for text null,
  height text null,
  workout_status character varying(255) null,
  pets character varying(255) null,
  bio text null,
  is_premium boolean null default false,
  profile_completion bigint null,
  user_id text not null,
  graduation_year character varying null,
  company character varying null,
  recommendationtimedays smallint null,
  openfordating boolean null default true,
  premiumtype text null,
  premiumvalidtill timestamp with time zone null,
  secrets text[] null,
  created timestamp with time zone null default now(),
  usersetlevel text null,
  adminsetlevel text null,
  constraint users_pkey primary key (user_id),
  constraint users_uid_key unique (user_id),
  constraint users_email_key unique (email),
  constraint users_workout_status_check check (
    (
      (workout_status)::text = any (
        array[
          ('regularly'::character varying)::text,
          ('sometimes'::character varying)::text,
          ('not active'::character varying)::text
        ]
      )
    )
  ),
  constraint users_pets_check check (
    (
      (pets)::text = any (
        array[
          ('want'::character varying)::text,
          ('dogs'::character varying)::text,
          ('want cats'::character varying)::text,
          ('no thanks'::character varying)::text
        ]
      )
    )
  ),
  constraint users_gender_check check (
    (
      gender = any (
        array[
          ('male'::character varying)::text,
          ('female'::character varying)::text
        ]
      )
    )
  ),
  constraint users_looking_for_check check (
    (
      looking_for = any (
        array[
          ('relationship'::character varying)::text,
          ('casual'::character varying)::text,
          ('dont know yet'::character varying)::text
        ]
      )
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_users_interests on public.users using btree (interests) TABLESPACE pg_default;

create index IF not exists idx_users_age on public.users using btree (age) TABLESPACE pg_default;

create index IF not exists idx_users_location on public.users using btree (location) TABLESPACE pg_default;

create trigger update_profile_completion_trigger BEFORE INSERT
or
update on users for EACH row
execute FUNCTION update_profile_completion ();

create table public.venues (
  id bigint generated by default as identity not null,
  created_at timestamp with time zone not null default now(),
  venue_name text null,
  images text[] null,
  maps_link text null,
  description text null,
  location text null,
  constraint venues_pkey primary key (id)
) TABLESPACE pg_default;